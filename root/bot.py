# –ò–º–ø–æ—Ä—Ç—ã (–æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –∫–∞–∫ –µ—Å—Ç—å, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä, —á—Ç–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)
import logging
import sqlite3
import asyncio
import os
import subprocess
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.deep_linking import create_start_link
from aiogram.utils.formatting import (
    Bold,
    Text,
)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—ç—Ç–æ —á–∞—Å—Ç—å –≤–∞—à–µ–≥–æ install.sh)
from dotenv import load_dotenv
load_dotenv(dotenv_path="/root/.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
FILEVPN_NAME = os.getenv("FILEVPN_NAME")
MAX_USER_CONFIGS = int(os.getenv("MAX_USER_CONFIGS", 3))

# YOUR_SITE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ –¥–æ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –±–µ–∑ "https://"
YOUR_SITE = "kosia-zlo.github.io/mysite/index.html"


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DB_PATH = "/root/antizapret/db.sqlite" # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
CONFIGS_DIR = "/root/antizapret/client/openvpn/vpn"
EASYRSA_PATH = "/etc/openvpn/easyrsa3" # –ü—É—Ç—å –∫ Easy-RSA
CLIENT_SH_PATH = "/root/antizapret/client.sh" # –ü—É—Ç—å –∫ client.sh
SERVER_OPENVPN_CONF = "/etc/openvpn/server/server.conf" # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥ OpenVPN —Å–µ—Ä–≤–µ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

# ... (–û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ bot.py –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class UserStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_config_name = State()
    waiting_for_admin_config_name = State()
    waiting_for_invoice_amount = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            chat_id INTEGER UNIQUE NOT NULL,
            reg_date TEXT,
            configs_count INTEGER DEFAULT 0,
            admin_status INTEGER DEFAULT 0,
            ban_status INTEGER DEFAULT 0,
            balance REAL DEFAULT 0.0,
            last_activity TEXT,
            inviter_id INTEGER,
            last_payment TEXT,
            next_payment TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS configs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            file_path TEXT NOT NULL,
            generation_date TEXT,
            expiry_date TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS invoices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            status TEXT DEFAULT 'pending',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    """)
    conn.commit()
    conn.close()

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–æ–ª–æ—á–∫–∏
async def execute_command(command, *args):
    full_command = [command] + list(args)
    logger.info(f"===[DEBUG EXEC]===")
    logger.info(f"COMMAND: {' '.join(full_command)}")
    process = await asyncio.create_subprocess_exec(
        *full_command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
        cwd=EASYRSA_PATH # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    )
    stdout, stderr = await process.communicate()
    logger.info(f"RET: {process.returncode}")
    logger.info(f"STDOUT: {stdout.decode().strip()}")
    logger.info(f"STDERR: {stderr.decode().strip()}")
    logger.info(f"===[END DEBUG]===")
    return process.returncode, stdout.decode().strip(), stderr.decode().strip()

# =========================================================================
# –†–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (User)
# =========================================================================

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_configs_count(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM configs WHERE user_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_main_menu(user_id):
    configs_count = get_user_configs_count(user_id) # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîë –ú–æ–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="my_configs"),
            ],
            [
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                InlineKeyboardButton(text=f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {configs_count}/{MAX_USER_CONFIGS}", callback_data="view_config_count"),
            ],
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create_config"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN", callback_data="manage_vpn"),
            ],
            [
                InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="balance_topup"),
            ],
            [
                InlineKeyboardButton(text="üîó –ù–∞—à —Å–∞–π—Ç", url=f"https://{YOUR_SITE}"),
            ],
            [
                # –ò–∑–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                InlineKeyboardButton(text="üôã‚Äç‚ôÄÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/krackqw"), 
            ],
        ]
    )
    return keyboard


# ... (–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# –ü—Ä–∏–º–µ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–∞ /start
@router.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id{user_id}"
    chat_id = message.chat.id
    reg_date = datetime.now(timezone.utc).isoformat()
    last_activity = datetime.now(timezone.utc).isoformat()

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE chat_id = ?", (chat_id,))
    user_data = cursor.fetchone()

    if user_data is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute(
            """
            INSERT INTO users (id, username, chat_id, reg_date, configs_count, admin_status, ban_status, balance, last_activity, inviter_id, last_payment, next_payment)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (user_id, username, chat_id, reg_date, 0, 0, 0, 0.0, last_activity, None, None, None)
        )
        conn.commit()
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-–±–æ—Ç, {username}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.",
            reply_markup=get_user_main_menu(user_id) # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º user_id
        )
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {username} ({user_id})")
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute(
            "UPDATE users SET username = ?, last_activity = ? WHERE chat_id = ?",
            (username, last_activity, chat_id)
        )
        conn.commit()
        await message.answer(
            f"–°–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!\n\n"
            "–í–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_user_main_menu(user_id) # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º user_id
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è: {username} ({user_id})")

    conn.close()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: X/Y"
@router.callback_query(F.data == "view_config_count")
async def handle_view_config_count(callback_query: Message):
    user_id = callback_query.from_user.id
    configs_count = get_user_configs_count(user_id)
    await callback_query.answer(f"–£ –≤–∞—Å {configs_count} –∏–∑ {MAX_USER_CONFIGS} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.", show_alert=True)
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ edit_message_reply_markup
    # await callback_query.message.edit_reply_markup(reply_markup=get_user_main_menu(user_id))


# ... (–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏) ...


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
